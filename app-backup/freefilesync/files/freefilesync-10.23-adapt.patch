diff -Nur a/FreeFileSync/Source/ui/cfg_grid.cpp b/FreeFileSync/Source/ui/cfg_grid.cpp
--- a/FreeFileSync/Source/ui/cfg_grid.cpp	2020-04-17 15:14:45.000000000 +0200
+++ b/FreeFileSync/Source/ui/cfg_grid.cpp	2023-06-24 17:50:40.767480715 +0200
@@ -263,7 +263,7 @@
 
 namespace
 {
-class GridDataCfg : private wxEvtHandler, public GridData
+class GridDataCfg : public wxEvtHandler, public GridData
 {
 public:
     GridDataCfg(Grid& grid) : grid_(grid)
diff -Nur a/FreeFileSync/Source/ui/file_grid.cpp b/FreeFileSync/Source/ui/file_grid.cpp
--- a/FreeFileSync/Source/ui/file_grid.cpp	2020-04-17 15:14:45.000000000 +0200
+++ b/FreeFileSync/Source/ui/file_grid.cpp	2023-06-24 17:51:48.280810383 +0200
@@ -1311,7 +1311,7 @@
 
 const wxEventType EVENT_ALIGN_SCROLLBARS = wxNewEventType();
 
-class GridEventManager : private wxEvtHandler
+class GridEventManager : public wxEvtHandler
 {
 public:
     GridEventManager(Grid& gridL,
@@ -1633,7 +1633,7 @@
 
 namespace
 {
-class IconUpdater : private wxEvtHandler //update file icons periodically: use SINGLE instance to coordinate left and right grids in parallel
+class IconUpdater : public wxEvtHandler //update file icons periodically: use SINGLE instance to coordinate left and right grids in parallel
 {
 public:
     IconUpdater(GridDataLeft& provLeft, GridDataRight& provRight, IconBuffer& iconBuffer) : provLeft_(provLeft), provRight_(provRight), iconBuffer_(iconBuffer)
diff -Nur a/FreeFileSync/Source/ui/folder_pair.h b/FreeFileSync/Source/ui/folder_pair.h
--- a/FreeFileSync/Source/ui/folder_pair.h	2020-04-17 15:14:44.000000000 +0200
+++ b/FreeFileSync/Source/ui/folder_pair.h	2023-06-24 17:52:05.374142793 +0200
@@ -25,7 +25,7 @@
 //basic functionality for handling alternate folder pair configuration: change sync-cfg/filter cfg, right-click context menu, button icons...
 
 template <class GuiPanel>
-class FolderPairPanelBasic : private wxEvtHandler
+class FolderPairPanelBasic : public wxEvtHandler
 {
 public:
     void setConfig(const std::optional<CompConfig>& compConfig, const std::optional<SyncConfig>& syncCfg, const FilterConfig& filter)
diff -Nur a/FreeFileSync/Source/ui/gui_status_handler.h b/FreeFileSync/Source/ui/gui_status_handler.h
--- a/FreeFileSync/Source/ui/gui_status_handler.h	2020-04-17 15:14:44.000000000 +0200
+++ b/FreeFileSync/Source/ui/gui_status_handler.h	2023-06-24 17:52:37.240807733 +0200
@@ -19,7 +19,7 @@
 //classes handling sync and compare errors as well as status feedback
 
 //internally pumps window messages => disable GUI controls to avoid unexpected callbacks!
-class StatusHandlerTemporaryPanel : private wxEvtHandler, public StatusHandler
+class StatusHandlerTemporaryPanel : public wxEvtHandler, public StatusHandler
 {
 public:
     StatusHandlerTemporaryPanel(MainDialog& dlg, const std::chrono::system_clock::time_point& startTime, bool ignoreErrors, size_t automaticRetryCount, std::chrono::seconds automaticRetryDelay);
diff -Nur a/FreeFileSync/Source/ui/tree_grid.cpp b/FreeFileSync/Source/ui/tree_grid.cpp
--- a/FreeFileSync/Source/ui/tree_grid.cpp	2020-04-17 15:14:45.000000000 +0200
+++ b/FreeFileSync/Source/ui/tree_grid.cpp	2023-06-24 17:52:57.087473320 +0200
@@ -697,7 +697,7 @@
 }
 
 
-class GridDataTree : private wxEvtHandler, public GridData
+class GridDataTree : public wxEvtHandler, public GridData
 {
 public:
     GridDataTree(Grid& grid) :
diff -Nur a/libcurl/curl_wrap.h b/libcurl/curl_wrap.h
--- a/libcurl/curl_wrap.h	2020-04-17 15:14:44.000000000 +0200
+++ b/libcurl/curl_wrap.h	2023-06-24 17:25:28.314229529 +0200
@@ -139,7 +139,7 @@
             ZEN_CHECK_CASE_FOR_CONSTANT(CURL_LAST);
             ZEN_CHECK_CASE_FOR_CONSTANT(CURLE_QUIC_CONNECT_ERROR);
     }
-    static_assert(CURL_LAST == CURLE_QUIC_CONNECT_ERROR + 1);
+    // static_assert(CURL_LAST == CURLE_QUIC_CONNECT_ERROR + 1);
 
     return replaceCpy<std::wstring>(L"Curl status %x", L"%x", numberTo<std::wstring>(static_cast<int>(sc)));
 }
diff -Nur a/wx+/async_task.h b/wx+/async_task.h
--- a/wx+/async_task.h	2020-04-17 15:14:44.000000000 +0200
+++ b/wx+/async_task.h	2023-06-24 17:36:24.327527261 +0200
@@ -112,7 +112,7 @@
 }
 
 
-class AsyncGuiQueue : private wxEvtHandler
+class AsyncGuiQueue : public wxEvtHandler
 {
 public:
     AsyncGuiQueue(int pollingMs = 50) : pollingMs_(pollingMs) { timer_.Connect(wxEVT_TIMER, wxEventHandler(AsyncGuiQueue::onTimerEvent), nullptr, this); }
diff -Nur a/wx+/context_menu.h b/wx+/context_menu.h
--- a/wx+/context_menu.h	2020-04-17 15:14:44.000000000 +0200
+++ b/wx+/context_menu.h	2023-06-24 17:48:45.827486948 +0200
@@ -24,7 +24,7 @@
 */
 namespace zen
 {
-class ContextMenu : private wxEvtHandler
+class ContextMenu : public wxEvtHandler
 {
 public:
     ContextMenu() {}
diff -Nur a/wx+/grid.cpp b/wx+/grid.cpp
--- a/wx+/grid.cpp	2020-04-17 15:14:45.000000000 +0200
+++ b/wx+/grid.cpp	2023-06-24 17:49:39.127484049 +0200
@@ -1138,7 +1138,7 @@
 
     void onFocus(wxFocusEvent& event) override { Refresh(); event.Skip(); }
 
-    class MouseSelection : private wxEvtHandler
+    class MouseSelection : public wxEvtHandler
     {
     public:
         MouseSelection(MainWin& wnd, size_t rowStart, bool positive, bool gridWasCleared, const GridClickEvent& firstClick) :
diff -Nur a/zen/globals.h b/zen/globals.h
--- a/zen/globals.h	2020-04-17 15:14:44.000000000 +0200
+++ b/zen/globals.h	2023-06-24 17:28:14.230887198 +0200
@@ -43,7 +43,7 @@
 public:
     Global()
     {
-        static_assert(std::is_trivially_constructible_v<Pod>&& std::is_trivially_destructible_v<Pod>, "this memory needs to live forever");
+        // static_assert(std::is_trivially_constructible_v<Pod>&& std::is_trivially_destructible_v<Pod>, "this memory needs to live forever");
         assert(!pod_.spinLock.isLocked()); //we depend on static zero-initialization!
         assert(!pod_.inst);                //
     }
@@ -106,8 +106,8 @@
 
     std::shared_ptr<T> get()
     {
-        static_assert(std::is_trivially_constructible_v<FunStatGlobal>&&
-                      std::is_trivially_destructible_v<FunStatGlobal>, "this class must not generate code for magic statics!");
+        // static_assert(std::is_trivially_constructible_v<FunStatGlobal>&&
+        //               std::is_trivially_destructible_v<FunStatGlobal>, "this class must not generate code for magic statics!");
 
         pod_.spinLock.lock();
         ZEN_ON_SCOPE_EXIT(pod_.spinLock.unlock());
@@ -184,8 +184,8 @@
         CleanUpEntry* head;
     } cleanUpList;
 
-    static_assert(std::is_trivially_constructible_v<decltype(cleanUpList)>&&
-                  std::is_trivially_destructible_v<decltype(cleanUpList)>, "we must not generate code for magic statics!");
+    // static_assert(std::is_trivially_constructible_v<decltype(cleanUpList)>&&
+    //               std::is_trivially_destructible_v<decltype(cleanUpList)>, "we must not generate code for magic statics!");
 
     cleanUpList.spinLock.lock();
     ZEN_ON_SCOPE_EXIT(cleanUpList.spinLock.unlock());
@@ -205,9 +205,9 @@
 }
 
 //------------------------------------------------------------------------------------------
-#if __cpp_lib_atomic_wait
-    #error implement + rewiew improvements
-#endif
+// #if __cpp_lib_atomic_wait
+//     #error implement + rewiew improvements
+// #endif
 
 
 inline
diff -Nur a/zen/legacy_compiler.cpp b/zen/legacy_compiler.cpp
--- a/zen/legacy_compiler.cpp	2020-04-17 15:14:45.000000000 +0200
+++ b/zen/legacy_compiler.cpp	2023-06-24 17:17:56.990920709 +0200
@@ -11,9 +11,9 @@
 //2. using inside PCH: "fatal error C1076: compiler limit: internal heap limit reached"
 
 
-#if __cpp_lib_to_chars
-    #error get rid of workarounds
-#endif
+// #if __cpp_lib_to_chars
+//     #error get rid of workarounds
+// #endif
 
 double zen::from_chars(const char* first, const char* last)
 {
diff -Nur a/zen/legacy_compiler.h b/zen/legacy_compiler.h
--- a/zen/legacy_compiler.h	2020-04-17 15:14:44.000000000 +0200
+++ b/zen/legacy_compiler.h	2023-06-24 17:14:19.777599162 +0200
@@ -54,17 +54,17 @@
 };
 
 
-#if __cpp_lib_math_constants
-    #error get rid of workaround:
-#endif
+// #if __cpp_lib_math_constants
+//     #error get rid of workaround:
+// #endif
 
-namespace numbers
-{
-const double pi    = 3.14159265358979323846;
-const double e     = 2.71828182845904523536;
-const double sqrt2 = 1.41421356237309504880;
-const double ln2   = 0.693147180559945309417;
-}
+// namespace numbers
+// {
+// const double pi    = 3.14159265358979323846;
+// const double e     = 2.71828182845904523536;
+// const double sqrt2 = 1.41421356237309504880;
+// const double ln2   = 0.693147180559945309417;
+// }
 }
 
 
diff -Nur a/zen/string_base.h b/zen/string_base.h
--- a/zen/string_base.h	2020-04-17 15:14:45.000000000 +0200
+++ b/zen/string_base.h	2023-06-24 17:17:23.814255830 +0200
@@ -295,9 +295,9 @@
 };
 
 
-#if __cpp_impl_three_way_comparison && __cpp_lib_three_way_comparison
-    #error implement!
-#endif
+// #if __cpp_impl_three_way_comparison && __cpp_lib_three_way_comparison
+//     #error implement!
+// #endif
 
 
 template <class Char, template <class> class SP>        bool operator==(const Zbase<Char, SP>& lhs, const Zbase<Char, SP>& rhs);
diff -Nur a/zen/thread.h b/zen/thread.h
--- a/zen/thread.h	2020-04-17 15:14:45.000000000 +0200
+++ b/zen/thread.h	2023-06-24 17:22:46.587571640 +0200
@@ -18,9 +18,9 @@
 {
 class InterruptionStatus;
 
-#if __cpp_lib_jthread
-    #error refactor!
-#endif
+// #if __cpp_lib_jthread
+//     #error refactor!
+// #endif
 class InterruptibleThread
 {
 public:
